package com.afurkan;
/*//Ödevim şu : Bir banka hesabı olarak, double tipinde balance isimli bir alana sahip Account ile onun istemcisi olan AccountClient sınıflarını
oluşturun. Account sınıfına gerekli kurucu ve diğer metotları koyun.
AccountClient nesnesinin Account nesneleri üzerinde şu işlemleri yapmasını sağlayın:
a. Para çekmek
b. Para yatırmak
c. Havale yapmak. Havale iki hesap arasında yapılan bir transferdir ve kendisinden havale yapılan hesaba ayrıca 
belirli bir havale masrafı yansıtır.
d. Oluşturacağınız bir AccountTest sınıfının main metodunda gerekli nesneleri oluşturup bu işlemleri yapın
*/

public class Account {
	private int accountNumber;
	private double balance;
	
	//Bu tür projelerde diğer sınıfın değişkeni de private yapıp mı kullanılmalı? //private AccountClient client;
	 AccountClient client;
	
	public Account(int accountNumber, double balance, AccountClient client) {
		this.balance = balance;
		this.accountNumber = accountNumber;
		this.client=client;
		
		//Bu şekilde account-client ilişkisi kurup tanıtmak yani set metotları  olmadan kurmak doğru mu?
		client.setAccount(this);
	}
	
	public void withdraw(double amount) {
		
		if(balance >= amount) {
			balance -= amount;
			System.out.println("You have withdrawn  $"+amount+" from your account.");
		}else {
			System.out.println("Insufficient balance!");
		}
		System.out.println("Your total balance: $"+balance);	
	}
	
	public void deposit(double amount) {
		balance += amount;
		System.out.println("You deposited $"+amount+" into your account.");
		System.out.println("Your total balance: $"+balance);
	}
	public void transfer(Account target, double amount) {
		if(balance >= amount) {
			balance -= amount;
			target.balance += amount;
		}else
			System.out.println("Insufficient balance!");
	}

	public void getInfoTargetAccount() {
		System.out.println("\nAccount Info:");
		System.out.println(accountNumber+" numarali Sn. musterimiz hesabiniza para gelmistir. Guncel tutariniz: $"+balance);
	}
	public void getInfoSenderAccount () {
		System.out.println("\nAccount Info:");
		System.out.println(accountNumber+" numarali Sn. musterimiz hesabinizdan para kesilmisitir. Guncel tutariniz: $"+balance);
	}
}

package com.afurkan;

public class AccountClient {
	private String name;
	private String lastName;
	private int id;
	
	//Bu tür projelerde diğer sınıfın değişkeni de private yapıp mı kullanılmalı?
	Account account;
	
	public AccountClient(int id, String name,String lastName) {
		this.id = id;
		this.name = name;
		this.lastName = lastName;
		
	}

	public void setAccount(Account account) {
		this.account = account;
		
	}
	public static void main(String[] args) {
		//Burada tamamen kafam karıştı AccountClient main metodunu hangi amaçla neleri oluşturup ilişkilendirmem lazım?
		//AccountTest'in main metodunun aynısını burada oluşturdum
		
		AccountClient customer1 = new AccountClient(2560, "Ayse","Celik");
		AccountClient customer2 = new AccountClient(2490,"Ahmet","Yilmaz");
		Account account1 = new Account(16747,3000,customer1); 
		Account account2 = new Account(24566,5000,customer2);
		
		customer1.account.deposit(300);
		System.out.println("*********");
		customer2.account.withdraw(400);
	}
}

package com.afurkan;

public class AccountTest {

	public static void main(String[] args) {
		AccountClient customer1 = new AccountClient(2555,"Ayse","Celik");
		AccountClient customer2 = new AccountClient(2490,"Ahmet","Yilmaz");
		
		Account account1 = new Account(16747,3000,customer1);
		Account account2 = new Account(24566,5000,customer2);
		
		//1.YÖNTEM
		account1.transfer(account2, 1500);
		
		account2.getInfoTargetAccount();
		
		account1.getInfoSenderAccount();
		
		System.out.println("***********");
		
		//Doğru olan yöntem hangisi?
		
		//2.YÖNTEM
		customer1.account.transfer(account2, 1000);
		
		account2.getInfoTargetAccount();
		
		account1.getInfoSenderAccount();
		
		
		System.out.println("************");
		
		
		account1.withdraw(300);
		//customer1.account.withdraw(300);
		
		System.out.println();
		
		account2.deposit(400);

	}
}
